pipeline {
    agent { label params.NODE_LABEL }

    parameters {
        string(
            name: 'NODE_LABEL',
            defaultValue: 'worker-node-1',
            description: 'Label of the Jenkins worker node to run this pipeline'
        )
        string(
            name: 'EC2_INSTANCE_NAME',
            defaultValue: 'mysql-server',
            description: 'Name tag for the EC2 instance'
        )
        // Consider adding parameters for MySQL password if you don't want to hardcode it
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout') {
            steps {
                git(
                    branch: 'main', // Adjust branch if needed, though checkout might not be strictly necessary for MySQL setup
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/Ganil151/spring-petclinic-microservices.git  '
                )
            }
            post {
                always { echo "========Checkout========" }
                success { echo "========Checkout ⭐Successfully⭐========" }
                failure { echo "========Checkout failed❌========" }
            }
        }

        stage('EC2 Provisioning & MySQL Setup') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh '''
                    echo "Checking if EC2 Instance already exists..."
                    # Debug: Print the value of EC2_INSTANCE_NAME
                    echo "DEBUG: EC2_INSTANCE_NAME is set to: '${EC2_INSTANCE_NAME}'"
                    
                    # Check if EC2_INSTANCE_NAME is empty or contains only whitespace
                    if [ -z "${EC2_INSTANCE_NAME}" ] || [ -z "$(echo "${EC2_INSTANCE_NAME}" | sed 's/[[:space:]]*//g')" ]; then
                      echo "ERROR: EC2_INSTANCE_NAME parameter is empty or contains only spaces."
                      exit 1
                    fi

                    INSTANCE_ID=$(aws ec2 describe-instances \
                      --filters "Name=tag:Name,Values=${EC2_INSTANCE_NAME}" "Name=instance-state-name,Values=running" \
                      --query "Reservations[0].Instances[0].InstanceId" \
                      --output text 2>/dev/null || echo "None")

                    if [ "$INSTANCE_ID" == "None" ] || [ -z "$INSTANCE_ID" ]; then
                      echo "No existing instance found with name '${EC2_INSTANCE_NAME}'. Launching a new EC2 instance..."
                        INSTANCE_ID=$(aws ec2 run-instances \
                        --image-id ami-00ca32bbc84273381 \
                        --instance-type t3.small \
                        --key-name master_keys \
                        --security-group-ids sg-01721a3a3b738749c \
                        --subnet-id subnet-04351b31e254306f1 \
                        --associate-public-ip-address \
                        --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${EC2_INSTANCE_NAME}}]" \
                        --query "Instances[0].InstanceId" \
                        --output text)
                      echo "Launched new EC2 Instance: $INSTANCE_ID"
                    else
                      echo "Using existing EC2 Instance: $INSTANCE_ID with name '${EC2_INSTANCE_NAME}'"
                    fi

                    if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" = "None" ]; then
                      echo "ERROR: Could not determine or launch an EC2 Instance ID."
                      exit 1
                    fi

                    echo "Waiting for instance $INSTANCE_ID to be running..."
                    aws ec2 wait instance-running --instance-ids $INSTANCE_ID
                    echo "Instance $INSTANCE_ID is now running."

                    PUBLIC_IP=$(aws ec2 describe-instances \
                      --instance-ids $INSTANCE_ID \
                      --query "Reservations[0].Instances[0].PublicIpAddress" \
                      --output text)

                    if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" = "None" ]; then
                      echo "ERROR: Could not retrieve Public IP for instance $INSTANCE_ID"
                      exit 1
                    fi

                    echo "EC2 Instance $INSTANCE_ID is running at $PUBLIC_IP"
                    echo $PUBLIC_IP > public_ip.txt
                    
                    # --- MySQL Installation and Configuration ---
                    echo "SSH into $PUBLIC_IP to install and configure MySQL..."
                    ssh -o StrictHostKeyChecking=no ec2-user@$PUBLIC_IP "
                    set -e # Exit on error

                    # Change Host Name
                    echo 'Changing Host Name...'
                    sudo hostnamectl set-hostname 'mysql-server'

                    # Load Dependencies
                    echo 'Updating system and installing dependencies...'
                    sudo yum update -y
                    sudo yum install -y java-21-amazon-corretto-devel wget git

                    # Configure Java (Note: This might not be strictly necessary just for MySQL, but kept as per script)
                    echo 'Configure Java'
                    JAVA_HOME='/usr/lib/jvm/java-21-amazon-corretto'
                    echo \"export JAVA_HOME=\$JAVA_HOME\" | sudo tee -a ~/.bashrc
                    echo \"export PATH=\$PATH:\$HOME/bin:\$JAVA_HOME\" | sudo tee -a ~/.bashrc

                    # Install MySQL 8.0
                    echo 'Downloading MySQL 8.0 repository...'
                    sudo wget https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm
                    sudo yum localinstall -y mysql80-community-release-el9-1.noarch.rpm
                    sudo rm -f mysql80-community-release-el9-1.noarch.rpm

                    echo 'Importing MySQL GPG key...'
                    # The GPG key is available at the URL provided in the script context
                    # We can import it directly using the URL
                    sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023

                    echo 'Installing MySQL server and client...'
                    sudo yum install -y mysql-community-client mysql-community-server

                    sudo yum update -y

                    # Start MySQL Service
                    echo 'Starting and enabling MySQL service...'
                    sudo systemctl start mysqld
                    sudo systemctl enable mysqld

                    # Secure MySQL Installation
                    echo 'Securing MySQL installation...'
                    if ! sudo grep -q 'temporary password' /var/log/mysqld.log; then
                      echo 'Temporary password not found in /var/log/mysqld.log'
                      exit 1
                    fi

                    TEMP_PASSWORD=\$(sudo grep 'temporary password' /var/log/mysqld.log | awk '{print \$NF}')
                    # Consider using a more robust password management strategy
                    NEW_PASSWORD='Mysql\$9999!'

                    mysql --connect-expired-password -uroot -p\"\$TEMP_PASSWORD\" <<EOF
ALTER USER 'root'@'localhost' IDENTIFIED BY '\$NEW_PASSWORD';
DELETE FROM mysql.user WHERE User='';
DROP DATABASE IF EXISTS test;
FLUSH PRIVILEGES;
EOF

                    # Create database and user for Spring PetClinic (adjust as needed)
                    mysql -u root -p\"\$NEW_PASSWORD\" <<MYSQL_SETUP_EOF
CREATE DATABASE IF NOT EXISTS petclinic;
CREATE USER 'petclinic'@'%' IDENTIFIED BY 'petclinic';
GRANT ALL PRIVILEGES ON petclinic.* TO 'petclinic'@'%';
FLUSH PRIVILEGES;
MYSQL_SETUP_EOF

                    # Restart MySQL to apply changes
                    echo 'Restarting MySQL service...'
                    sudo systemctl restart mysqld

                    echo 'MySQL installation, security configuration, and initial database setup completed successfully.'
                    echo 'MySQL Root Password: \$NEW_PASSWORD'
                    echo 'MySQL PetClinic User Password: petclinic' # Or use the same NEW_PASSWORD if preferred
                    echo 'MySQL Server IP: $PUBLIC_IP'
                    "
                    # --- End of MySQL Installation and Configuration ---
                    '''
                }
            }
            post {
                always { echo "======= EC2 Provisioning & MySQL Setup =======" }
                success { echo "======= EC2 Provisioning & MySQL Setup ⭐Successfully⭐========" }
                failure { echo "======= EC2 Provisioning & MySQL Setup failed❌========" }
            }
        }
    }
}