// MySql Jenkinsfile
pipeline {
    agent { label params.NODE_LABEL }

    parameters {
        string(name: 'NODE_LABEL', defaultValue: 'mysql-node', description: 'Label of the Jenkins worker node')
        string(name: 'EC2_PUBLIC_IP', defaultValue: '18.209.159.148', description: 'Public IP of the EC2 instance')
        password(name: 'MYSQL_ROOT_PASSWORD', defaultValue: 'Mysql$3773!', description: 'Root password for MySQL')
        string(name: 'MYSQL_PETCLINIC_DB_NAME', defaultValue: 'petclinic', description: 'PetClinic DB name')
        string(name: 'MYSQL_PETCLINIC_USER', defaultValue: 'petclinic_user', description: 'PetClinic DB username')
        password(name: 'MYSQL_PETCLINIC_PASSWORD', defaultValue: 'Petclinic$3773!', description: 'PetClinic DB password')
    }

    stages {
        stage('Checkout Spring PetClinic Code') {
            steps {
                git branch: 'main',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/Ganil151/spring-petclinic-microservices.git'
            }
            post {
                always { echo "======== Checkout Stage Completed ========" }
            }
        }

        stage('Install & Configure MySQL on EC2') {
            steps {
                sshagent(['master_keys']) {
                    sh """
                        set -e
                        EC2_PUBLIC_IP="${params.EC2_PUBLIC_IP}"

                        if [ -z "\$EC2_PUBLIC_IP" ]; then
                            echo "ERROR: EC2_PUBLIC_IP parameter not set!"
                            exit 1
                        fi

                        echo "Connecting to EC2 instance at \$EC2_PUBLIC_IP..."

                        ssh -o StrictHostKeyChecking=no ec2-user@\$EC2_PUBLIC_IP 'bash -s' <<'EOF'
                        set -e

                        echo "Setting hostname..."
                        sudo hostnamectl set-hostname mysql-server || true

                        echo "Checking if MySQL is already installed..."
                        if command -v mysql >/dev/null 2>&1; then
                            echo "MySQL is already installed. Skipping installation."
                            sudo systemctl status mysqld || sudo systemctl start mysqld
                            exit 0
                        fi

                        echo "Installing prerequisites..."
                        sudo yum update -y
                        sudo yum install -y wget git

                        echo "Installing MySQL 8.0..."
                        sudo wget https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm -O /tmp/mysql.rpm
                        sudo yum localinstall -y /tmp/mysql.rpm
                        sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
                        sudo yum install -y mysql-community-client mysql-community-server

                        echo "Starting MySQL service..."
                        sudo systemctl enable mysqld
                        sudo systemctl start mysqld

                        echo "Extracting temporary root password..."
                        TEMP_PASSWORD=\$(sudo grep 'temporary password' /var/log/mysqld.log | awk '{print \$NF}')
                        if [ -z "\$TEMP_PASSWORD" ]; then
                            echo "No temporary password found — MySQL may already be initialized."
                            TEMP_PASSWORD="invalid"
                        fi

                        echo "Configuring MySQL for PetClinic..."
                        MYSQL_ROOT_PASSWORD="${params.MYSQL_ROOT_PASSWORD}"
                        MYSQL_PETCLINIC_DB_NAME="${params.MYSQL_PETCLINIC_DB_NAME}"
                        MYSQL_PETCLINIC_USER="${params.MYSQL_PETCLINIC_USER}"
                        MYSQL_PETCLINIC_PASSWORD="${params.MYSQL_PETCLINIC_PASSWORD}"

                        cat <<SQL | sudo mysql --connect-expired-password -uroot -p"\$TEMP_PASSWORD" || true
                        ALTER USER 'root'@'localhost' IDENTIFIED BY '\$MYSQL_ROOT_PASSWORD';
                        CREATE DATABASE IF NOT EXISTS \$MYSQL_PETCLINIC_DB_NAME;
                        CREATE USER IF NOT EXISTS '\$MYSQL_PETCLINIC_USER'@'%' IDENTIFIED BY '\$MYSQL_PETCLINIC_PASSWORD';
                        GRANT ALL PRIVILEGES ON \$MYSQL_PETCLINIC_DB_NAME.* TO '\$MYSQL_PETCLINIC_USER'@'%';
                        FLUSH PRIVILEGES;
                        SQL

                        echo "🔁 Restarting MySQL service..."
                        sudo systemctl restart mysqld

                        echo "✅ MySQL installation and configuration completed successfully!"
                    EOF
                    """
                }
            }
            post {
                always { echo "======= Install & Configure MySQL Stage Completed =======" }
                success { echo "✅ MySQL configured successfully on EC2." }
                failure { echo "❌ MySQL installation failed." }
            }
        }
    }

    post {
        always {
            script {
                if (params.EC2_PUBLIC_IP) {
                    echo "ℹ️ MySQL configured on server: ${params.EC2_PUBLIC_IP}"
                }
            }
        }
    }
}







// MySql Jenkinsfile with improved error handling and idempotency
 
pipeline {
    agent { label params.NODE_LABEL }

    parameters {
        string(name: 'NODE_LABEL', defaultValue: 'mysql-node', description: 'Label of the Jenkins worker node (where MySQL runs)')
        string(name: 'MYSQL_PETCLINIC_DB_NAME', defaultValue: 'petclinic', description: 'PetClinic database name')
        string(name: 'MYSQL_PETCLINIC_USER', defaultValue: 'petclinic_user', description: 'PetClinic DB username')
        password(name: 'MYSQL_PETCLINIC_PASSWORD', defaultValue: 'Petclinic$3773!', description: 'PetClinic DB password')
    }

    environment {
        MYSQL_CRED = credentials('mysql-credentials')
    }

    stages {

        stage('Checkout Spring PetClinic Code') {
            steps {
                git branch: 'main',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/Ganil151/spring-petclinic-microservices.git'
            }
            post {
                always {
                    echo "======== ✅ Checkout Stage Completed ========"
                }
            }
        }

        stage('Install & Configure MySQL & Import Schema') {
            steps {
                sh """
                    set -e
                    echo "Starting MySQL setup on node: \$(hostname)"

                    # Inject pipeline parameters into shell variables
                    MYSQL_ROOT_PASSWORD="${MYSQL_CRED}"
                    MYSQL_PETCLINIC_DB_NAME="${params.MYSQL_PETCLINIC_DB_NAME}"
                    MYSQL_PETCLINIC_USER="${params.MYSQL_PETCLINIC_USER}"
                    MYSQL_PETCLINIC_PASSWORD="${params.MYSQL_PETCLINIC_PASSWORD}"

                    # Install MySQL if missing
                    if ! command -v mysqld >/dev/null 2>&1; then
                        echo "Installing MySQL 8.0..."
                        sudo yum update -y
                        sudo yum install -y wget git
                        sudo wget https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm -O /tmp/mysql.rpm
                        sudo yum localinstall -y /tmp/mysql.rpm
                        sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
                        sudo yum install -y mysql-community-server
                        sudo systemctl enable --now mysqld
                    else
                        echo "✅ MySQL already installed. Ensuring service is running..."
                        sudo systemctl enable --now mysqld || true
                    fi

                    # Extract temporary password if exists
                    TEMP_PASSWORD=\$(sudo grep 'temporary password' /var/log/mysqld.log | awk '{print \$NF}' | tail -1 || true)
                    if [ -n "\$TEMP_PASSWORD" ]; then
                        echo "Found temporary MySQL password."
                    else
                        echo "No temporary password found (existing installation)."
                    fi

                    # Try connection methods
                    CONNECTED=0

                    if sudo mysql -e 'SELECT 1;' >/dev/null 2>&1; then
                        echo "Using sudo mysql (socket auth)..."

                        sudo mysql -e "
                            CREATE DATABASE IF NOT EXISTS \\\`${MYSQL_PETCLINIC_DB_NAME}\\\`;
                            CREATE USER IF NOT EXISTS '${MYSQL_PETCLINIC_USER}'@'%' IDENTIFIED BY '${MYSQL_PETCLINIC_PASSWORD}';
                            GRANT ALL PRIVILEGES ON \\\`${MYSQL_PETCLINIC_DB_NAME}\\\`.* TO '${MYSQL_PETCLINIC_USER}'@'%';
                            FLUSH PRIVILEGES;
                        "
                        CONNECTED=1

                    elif [ -n "\$TEMP_PASSWORD" ] && echo 'SELECT 1;' | mysql --connect-expired-password -uroot -p"\$TEMP_PASSWORD" >/dev/null 2>&1; then
                        echo "Using temporary password to set root password..."

                        mysql --connect-expired-password -uroot -p"\$TEMP_PASSWORD" -e "
                            ALTER USER 'root'@'localhost' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}';
                            CREATE DATABASE IF NOT EXISTS \\\`${MYSQL_PETCLINIC_DB_NAME}\\\`;
                            CREATE USER IF NOT EXISTS '${MYSQL_PETCLINIC_USER}'@'%' IDENTIFIED BY '${MYSQL_PETCLINIC_PASSWORD}';
                            GRANT ALL PRIVILEGES ON \\\`${MYSQL_PETCLINIC_DB_NAME}\\\`.* TO '${MYSQL_PETCLINIC_USER}'@'%';
                            FLUSH PRIVILEGES;
                        "
                        CONNECTED=1

                    elif echo 'SELECT 1;' | mysql -uroot -p"${MYSQL_ROOT_PASSWORD}" >/dev/null 2>&1; then
                        echo "Using provided root password..."

                        mysql -uroot -p"${MYSQL_ROOT_PASSWORD}" -e "
                            CREATE DATABASE IF NOT EXISTS \\\`${MYSQL_PETCLINIC_DB_NAME}\\\`;
                            CREATE USER IF NOT EXISTS '${MYSQL_PETCLINIC_USER}'@'%' IDENTIFIED BY '${MYSQL_PETCLINIC_PASSWORD}';
                            GRANT ALL PRIVILEGES ON \\\`${MYSQL_PETCLINIC_DB_NAME}\\\`.* TO '${MYSQL_PETCLINIC_USER}'@'%';
                            FLUSH PRIVILEGES;
                        "
                        CONNECTED=1

                    else
                        echo "Attempting fallback: reset root password via --init-file..."
                        echo "ALTER USER 'root'@'localhost' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}';" | sudo tee /tmp/reset-root.sql >/dev/null
                        sudo systemctl stop mysqld
                        sudo mysqld --init-file=/tmp/reset-root.sql &
                        sleep 5
                        sudo systemctl restart mysqld

                        if echo 'SELECT 1;' | mysql -uroot -p"${MYSQL_ROOT_PASSWORD}" >/dev/null 2>&1; then
                            echo "Root password reset successfully."

                            mysql -uroot -p"${MYSQL_ROOT_PASSWORD}" -e "
                                CREATE DATABASE IF NOT EXISTS \\\`${MYSQL_PETCLINIC_DB_NAME}\\\`;
                                CREATE USER IF NOT EXISTS '${MYSQL_PETCLINIC_USER}'@'%' IDENTIFIED BY '${MYSQL_PETCLINIC_PASSWORD}';
                                GRANT ALL PRIVILEGES ON \\\`${MYSQL_PETCLINIC_DB_NAME}\\\`.* TO '${MYSQL_PETCLINIC_USER}'@'%';
                                FLUSH PRIVILEGES;
                            "
                            CONNECTED=1
                        fi
                    fi

                    if [ "\$CONNECTED" -eq 0 ]; then
                        echo "ERROR: Unable to authenticate as root. Manual intervention required."
                        exit 1
                    fi

                    # Verify database creation
                    echo "Verifying database and user creation..."
                    export MYSQL_PWD="${MYSQL_PETCLINIC_PASSWORD}"
                    DATABASE_EXISTS=\$(mysql -u"${MYSQL_PETCLINIC_USER}" -se "SHOW DATABASES LIKE '${MYSQL_PETCLINIC_DB_NAME}';" || true)
                    unset MYSQL_PWD

                    if [ -z "\$DATABASE_EXISTS" ]; then
                        echo "ERROR: Database ${MYSQL_PETCLINIC_DB_NAME} was not created."
                        exit 1
                    else
                        echo "Database ${MYSQL_PETCLINIC_DB_NAME} created successfully."
                    fi

                    # Verify user privileges
                    export MYSQL_PWD="${MYSQL_PETCLINIC_PASSWORD}"
                    USER_EXISTS=\$(mysql -u"${MYSQL_PETCLINIC_USER}" -se "SELECT COUNT(*) FROM mysql.user WHERE User = '${MYSQL_PETCLINIC_USER}' AND Host = '%';" || true)
                    unset MYSQL_PWD

                    if [ "\$USER_EXISTS" -eq 0 ]; then
                        echo "ERROR: User ${MYSQL_PETCLINIC_USER} was not created."
                        exit 1
                    else
                        echo "User ${MYSQL_PETCLINIC_USER} created successfully."
                    fi
                """
            }
            post {
                always { echo "======= Install & Configure MySQL Stage Completed =======" }
                success { echo "MySQL configured and PetClinic schema imported successfully." }
                failure { echo "MySQL installation or configuration failed. Check logs above." }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed for node: ${params.NODE_LABEL}"
        }
    }
}

// MySql 2 Jenkinsfile
pipeline {
    agent { label params.NODE_LABEL }

    parameters {
        string(name: 'NODE_LABEL', defaultValue: 'mysql-node', description: 'Label of the Jenkins node where MySQL runs')
        string(name: 'MYSQL_PETCLINIC_DB_NAME', defaultValue: 'petclinic', description: 'PetClinic database name')
        string(name: 'MYSQL_PETCLINIC_USER', defaultValue: 'petclinic_user', description: 'PetClinic DB username')
        password(name: 'MYSQL_PETCLINIC_PASSWORD', defaultValue: 'Petclinic$3773!', description: 'PetClinic DB password (used for root auth only)')
    }

    stages {

        stage('Checkout Spring PetClinic Repo') {
            steps {
                git branch: 'main',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/Ganil151/spring-petclinic-microservices.git'
            }
            post {
                always {
                    echo "======== ✅ Checkout Stage Completed ========"
                }
            }
        }

        stage('Create PetClinic Database & Import Schema') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'mysql-credentials', usernameVariable: 'MYSQL_ROOT_USER', passwordVariable: 'MYSQL_ROOT_PASSWORD')]) {
                    sh '''
set -euo pipefail
echo "🚀 Starting MySQL schema import on node: $(hostname)"

# Assign Jenkins parameters (Groovy -> shell)
MYSQL_DB="${MYSQL_PETCLINIC_DB_NAME}"
MYSQL_USER="${MYSQL_PETCLINIC_USER}"
MYSQL_ROOT_PASSWORD_FOR_AUTH="${MYSQL_ROOT_PASSWORD}"

# Generate a strong random password for the app user
MYSQL_APP_USER_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-16)
echo "Generated strong password for ${MYSQL_USER}. Length: ${#MYSQL_APP_USER_PASSWORD}"

# --- Verify MySQL root connection ---
if ! mysql -u"${MYSQL_ROOT_USER}" -p"${MYSQL_ROOT_PASSWORD_FOR_AUTH}" -e "SELECT VERSION();" >/dev/null 2>&1; then
    echo "ERROR: Cannot connect to MySQL using provided root credentials."
    exit 1
fi
echo "Connected to MySQL successfully."

# --- Create DB and user ---
mysql -u"${MYSQL_ROOT_USER}" -p"${MYSQL_ROOT_PASSWORD_FOR_AUTH}" <<-SQL
    CREATE DATABASE IF NOT EXISTS `${MYSQL_DB}`;
    CREATE USER IF NOT EXISTS '${MYSQL_USER}'@'%' IDENTIFIED BY '${MYSQL_APP_USER_PASSWORD}';
    GRANT ALL PRIVILEGES ON `${MYSQL_DB}`.* TO '${MYSQL_USER}'@'%';
    FLUSH PRIVILEGES;
SQL
echo "Database and user setup complete."

# --- Locate SQL files ---
echo "Searching for .sql schema files..."
SQL_FILES=$(find . -type f -name "*.sql" | sort || true)

if [ -z "$SQL_FILES" ]; then
    echo "No SQL files found — skipping import."
    exit 0
fi

# --- Import SQL files ---
export MYSQL_PWD="${MYSQL_APP_USER_PASSWORD}"
for file in $SQL_FILES; do
    echo "➡️ Importing: $file"
    mysql -h'127.0.0.1' -u"${MYSQL_USER}" "${MYSQL_DB}" < "$file"
done
unset MYSQL_PWD

# --- Verify import ---
export MYSQL_PWD="${MYSQL_APP_USER_PASSWORD}"
TABLE_COUNT=$(mysql -h'127.0.0.1' -u"${MYSQL_USER}" -D "${MYSQL_DB}" -se "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='${MYSQL_DB}';" 2>/dev/null || echo 0)
unset MYSQL_PWD

if [ "${TABLE_COUNT}" -gt 0 ]; then
    echo "Database ${MYSQL_DB} imported successfully with ${TABLE_COUNT} tables."
else
    echo "No tables found after import. Check SQL files."
    exit 1
fi

# --- Save generated password in workspace (optional) ---
echo "${MYSQL_APP_USER_PASSWORD}" > ./petclinic_user_password.txt
echo "Generated password saved to ./petclinic_user_password.txt"
                    '''
                }
            }
            post {
                always { echo "======= ✅ MySQL Schema Import Stage Completed =======" }
                success { echo "PetClinic database and schema created successfully." }
                failure { echo "MySQL database or schema creation failed. Check logs above." }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed for node: ${params.NODE_LABEL}"
        }
    }
}


